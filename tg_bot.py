import logging
from aiogram.dispatcher.filters.state import State
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from deepl import Translator
from selenium import webdriver
from selenium.webdriver.common.by import By
import time,os

LANGUAGE = State()


def translate(text,lang):
    api_key = '8b743847-b2e7-2279-4650-ebf8dea7685b:fx'

    translator = Translator(api_key)
    return translator.translate_text(text,target_lang=lang).text

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='6024462006:AAFxuXLaQoGFBn6lPvLrnAD8-DJa_jJijCI')
dp = Dispatcher(bot, storage=MemoryStorage())

def get_subtitles(video_url):
    user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36'
    options = webdriver.ChromeOptions()
    options.add_argument(user_agent)
    options.add_argument('--headless')

    with webdriver.Chrome(options=options) as browser:
        try:
            browser.get(video_url)
            time.sleep(1)
            browser.save_screenshot('screenshot.png')
            time.sleep(2)
            reject_cookies = browser.find_element(By.XPATH,'/html/body/ytd-app/ytd-consent-bump-v2-lightbox/tp-yt-paper-dialog/div[4]/div[2]/div[6]/div[1]/ytd-button-renderer[1]/yt-button-shape/button')
            reject_cookies.click()
            browser.save_screenshot('screenshot.png')

            time.sleep(1)
            menu_button = browser.find_element(By.XPATH,'/html/body/ytd-app/div[1]/ytd-page-manager/ytd-watch-flexy/div[5]/div[1]/div/div[2]/ytd-watch-metadata/div/div[2]/div[2]/div/div/ytd-menu-renderer/yt-button-shape')
            menu_button.click()
            browser.save_screenshot('screenshot.png')
            
            elementy = browser.find_elements(By.TAG_NAME,'tp-yt-paper-item')
            elementy[-1].click()
            browser.save_screenshot('screenshot.png')
            
            time.sleep(1)
            captions = browser.find_element(By.ID,'segments-container').text
        except:
            print('–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

    subtitles = []
    lines = captions.split('\n')

    for i in range(len(lines)):
        if lines[i].__contains__(':') and all(value.isdigit() for value in lines[i].split(':')):
            try:
                subtitle = lines[i+1]
                subtitles.append(subtitle)
            except:
                print(f'ERROR in line {lines[i+1]}') 
    print(' '.join(subtitles))
    return '\n'.join(subtitles)

# –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ñ–ª–∞–≥–∞–º–∏ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏ —è–∑—ã–∫–æ–≤
language_flags = {
    'üá¨üáß': 'EN-GB',  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
    'üá©üá™': 'DE',  # –ù–µ–º–µ—Ü–∫–∏–π
    'üá´üá∑': 'FR',  # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
    'üáÆüáπ': 'IT',  # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π
    'üá™üá∏': 'ES',  # –ò—Å–ø–∞–Ω—Å–∫–∏–π
    'üá≥üá±': 'NL',  # –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π
    'üáµüáπ': 'PT',  # –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π
    'üá∑üá∫': 'RU',  # –†—É—Å—Å–∫–∏–π
    'üáµüá±': 'PL',  # –ü–æ–ª—å—Å–∫–∏–π
    'üá∫üá¶': 'UK',  # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π
    'üá∑üá¥': 'RO',  # –†—É–º—ã–Ω—Å–∫–∏–π
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏ –∏ –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –≤–∏–¥–µ–æ."
    text += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã."
    await message.reply(text)
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
@dp.message_handler(regexp=r'https?://[^\s]+')
async def video_handler(message: types.Message, state: FSMContext):
    video_url = message.text
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(video=video_url)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    reply_keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for flag in language_flags.keys():
        reply_keyboard.add(flag)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=reply_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message_handler(lambda message: message.text in language_flags.keys(), state=LANGUAGE)
async def language_handler(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ —Ñ–ª–∞–≥—É
    selected_flag = message.text
    selected_language = language_flags.get(selected_flag)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(language=selected_language)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    video_url = user_data.get('video')
    
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ video_url
    # –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ selected_language
    
    # –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º deepl
    subtitles = get_subtitles(video_url)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    translated_subtitles = translate(subtitles, selected_language)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    print(translated_subtitles)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    file_path = f'subtitles_{selected_language}.txt'
    with open(file_path, 'a') as file:
        file.write(translated_subtitles)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(file_path, 'rb') as file:
        await message.reply_document(file)
    
    os.remove(file_path)

    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!')
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await start_handler(message)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
